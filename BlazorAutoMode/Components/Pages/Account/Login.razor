@page "/login"

@using BlazorAutoMode.Client.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 col-md-6 offset-md-3 col-sm-8 offset-sm-2">
        <EditForm Model="@LoginModel" OnValidSubmit="@HandleValidSubmit" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>

            <div class="form-group">
                <label></label>
                <InputText @bind-Value="LoginModel.UserName" class="form-control" placeholder="JohnDoe"/>
                <ValidationMessage For="() => LoginModel.UserName" />
            </div>

            <div class="form-group">
                <label></label>
                <InputText @bind-Value="LoginModel.Password" type="password" class="form-control" />
                <ValidationMessage For="() => LoginModel.Password" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public LoginViewModel LoginModel { get; set; } = new();

    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        // Simulate a login attempt
        if ((LoginModel.UserName != "admin" || LoginModel.Password != "admin") &&
            (LoginModel.UserName != "user" || LoginModel.Password != "user"))
        {
            // Login failed
            errorMessage = "Invalid username or password.";
            return;
        }

        // Login successful
        errorMessage = string.Empty;
        // Mock claims for demonstration purposes
        var claims = new List<Claim>
        {
            new Claim("sub", LoginModel.UserName),
            new Claim(ClaimTypes.Name, LoginModel.UserName),
            new Claim(ClaimTypes.Role, LoginModel.UserName == "admin" ? "Administrator" : "User"),
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        navigationManager.NavigateTo("/");
    }
}
