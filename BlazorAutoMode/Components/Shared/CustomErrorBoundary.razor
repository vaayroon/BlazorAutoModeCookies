@inherits ErrorBoundary
@using Microsoft.AspNetCore.Components.Web
@using System.Diagnostics
@using BlazorAutoMode.Services
@using BlazorAutoMode.Components.Shared

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@if (CurrentException is not null)
{
    <GlobalErrorDisplay 
        ErrorMessage="@GetUserFriendlyErrorMessage()"
        DetailedError="@GetDetailedErrorInfo()"
        OnReload="@Recover" />
}

@code {
    [Inject] private ILogger<CustomErrorBoundary> Logger { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IErrorLoggingService ErrorLoggingService { get; set; } = default!;
    [Inject] private IWebHostEnvironment HostEnvironment { get; set; } = default!;
    
    protected override Task OnErrorAsync(Exception exception)
    {
        // Log the error to our centralized error logging service
        ErrorLoggingService.LogError(
            exception,
            "Blazor UI Rendering",
            $"URL: {NavigationManager.Uri}"
        );
        
        return base.OnErrorAsync(exception);
    }
    
    private string GetUserFriendlyErrorMessage()
    {
        if (CurrentException is null)
            return "An unknown error occurred.";
            
        // Provide more user-friendly messages for known exception types
        return CurrentException switch
        {
            InvalidOperationException => "The application encountered an unexpected state. This could be due to timing or data inconsistency.",
            NullReferenceException => "The application tried to use data that wasn't available.",
            HttpRequestException => "There was a problem connecting to the server. Please check your internet connection.",
            TimeoutException => "The operation timed out. Please try again later.",
            _ => "Sorry, something went wrong while rendering this page."
        };
    }
    
    private string GetDetailedErrorInfo()
    {
        if (CurrentException is null)
            return string.Empty;
            
        var errorInfo = new System.Text.StringBuilder();
        errorInfo.AppendLine($"Error Type: {CurrentException.GetType().FullName}");
        errorInfo.AppendLine($"Message: {CurrentException.Message}");
        
        if (CurrentException.StackTrace is not null)
        {
            errorInfo.AppendLine("\nStack Trace:");
            errorInfo.AppendLine(CurrentException.StackTrace);
        }
        
        if (CurrentException.InnerException is not null)
        {
            errorInfo.AppendLine("\nInner Exception:");
            errorInfo.AppendLine($"Type: {CurrentException.InnerException.GetType().FullName}");
            errorInfo.AppendLine($"Message: {CurrentException.InnerException.Message}");
            
            if (CurrentException.InnerException.StackTrace is not null)
            {
                errorInfo.AppendLine("Stack Trace:");
                errorInfo.AppendLine(CurrentException.InnerException.StackTrace);
            }
        }
        
        return errorInfo.ToString();
    }
}
